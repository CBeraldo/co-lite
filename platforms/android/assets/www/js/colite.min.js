!function(){"use strict";function e(){var e=this;return e.connect=function(){var e={name:"database.db",location:"default",bgType:1};return $cordovaSQLite.openDB(e)},e.execute=function(t,r){return $cordovaSQLite.execute(e.connect(),t,r)},e.deviceready=function(e){document.addEventListener("deviceready",function(){e()},!1)},e.orm={drop:function(){var t=["DROP TABLE IF EXISTS",this.displayName].join("  ");return e.execute(t)},create:function(){var t=this,r=[];Object.keys(t.prototype).forEach(function(e,n){var o="",i=t.base[e];o=[o,e,i.type].join(" "),o=i.allowNulls?[o,"NULL"].join(" "):[o,"NOT NULL"].join(" "),i.primaryKey?o=[o,"PRIMARY KEY AUTOINCREMENT"].join(" "):i.uniqueKey&&(o=[o,"UNIQUE"].join(" ")),r.push(o)});var n=["CREATE TABLE IF NOT EXISTS",this.displayName,"(",r.join(", "),")"].join("  ");return e.execute(n)},insert:function(t){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(e,r){"id"!=e&&(n.push(e),o.push(t[e]))});var i=" insert into {0} ( {1} ) values ( ? {2} ) ".format(r.displayName,n.join(", "),", ?".repeat(o.length-1));return e.execute(i,o)},update:function(t){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(e,r){"id"!=e&&(n.push(e+" = ?"),o.push(t[e]))}),o.push(t.id);var i=" update {0} set {1} where id = ? ".format(r.displayName,n.join(", "));return e.execute(i,o)},delete:function(t){var r=this,n=" delete from {0} where id = ? ".format(r.displayName);return e.execute(n,[t])},select:function(t){var r=" select * from {0} ".format([this.displayName]);return t?(r+=" where id = ? ",e.execute(r,[t])):e.execute(r)}},e.implement=function(t,r,n){function o(){}return Object.keys(r).forEach(function(e){o.prototype[e]=null}),o.prototype.id=null,o.displayName=t,o.base=r,o.drop=e.orm.drop,o.create=e.orm.create,o.insert=e.orm.insert,o.update=e.orm.update,o.delete=e.orm.delete,o.select=e.orm.select,e.deviceready(function(){n&&o.drop(),o.create()}),o},{deviceready:e.deviceready,implement:e.implement}}String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}),String.prototype.repeat||(String.prototype.repeat=function(e){for(var t="",r=this,n=0;n<e;n++)t+=r;return t});angular.module("Colite",["ngCordova"]).service("$colite",e).constant("Colite",{STRING:"STRING",INTEGER:"INTEGER",DATE:"DATE",DATETIME:"DATETIME",BIGINT:"BIGINT",DECIMAL:"NUMERIC",TEXT:"TEXT"});e.$inject=["$cordovaSQLite"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
