!function(){"use strict";function e(e){var t=this;return t.connect=function(){var t={name:"database.db",location:"default",bgType:1};return e.openDB(t)},t.execute=function(r,n){return e.execute(t.connect(),r,n)},t.deviceready=function(e){document.addEventListener("deviceready",function(){e()},!1)},t.orm={drop:function(){var e=["DROP TABLE IF EXISTS",this.displayName].join("  ");return t.execute(e)},create:function(){var e=this,r=[];Object.keys(e.prototype).forEach(function(t,n){var o="",i=e.base[t];o=[o,t,i.type].join(" "),o=i.allowNulls?[o,"NULL"].join(" "):[o,"NOT NULL"].join(" "),i.primaryKey?o=[o,"PRIMARY KEY AUTOINCREMENT"].join(" "):i.uniqueKey&&(o=[o,"UNIQUE"].join(" ")),r.push(o)});var n=["CREATE TABLE IF NOT EXISTS",this.displayName,"(",r.join(", "),")"].join("  ");return t.execute(n)},insert:function(e){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(t,r){"id"!=t&&(n.push(t),o.push(e[t]))});var i=" insert into {0} ( {1} ) values ( ? {2} ) ".format(r.displayName,n.join(", "),", ?".repeat(o.length-1));return t.execute(i,o)},update:function(e){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(t,r){"id"!=t&&(n.push(t+" = ?"),o.push(e[t]))}),o.push(e.id);var i=" update {0} set {1} where id = ? ".format(r.displayName,n.join(", "));return t.execute(i,o)},delete:function(e){var r=this,n=" delete from {0} where id = ? ".format(r.displayName);return t.execute(n,[e])},select:function(e){var r=" select * from {0} ".format([this.displayName]);return e?(r+=" where id = ? ",t.execute(r,[e])):t.execute(r)}},t.implement=function(e,r,n){function o(){}return Object.keys(r).forEach(function(e){o.prototype[e]=null}),o.prototype.id=null,o.displayName=e,o.base=r,o.drop=t.orm.drop,o.create=t.orm.create,o.insert=t.orm.insert,o.update=t.orm.update,o.delete=t.orm.delete,o.select=t.orm.select,t.deviceready(function(){n&&o.drop(),o.create()}),o},{deviceready:t.deviceready,implement:t.implement}}String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}),String.prototype.repeat||(String.prototype.repeat=function(e){for(var t="",r=this,n=0;n<e;n++)t+=r;return t});angular.module("Colite",["ngCordova"]).service("$colite",e).constant("Colite",{STRING:"STRING",INTEGER:"INTEGER",DATE:"DATE",DATETIME:"DATETIME",BIGINT:"BIGINT",DECIMAL:"NUMERIC",TEXT:"TEXT"});e.$inject=["$cordovaSQLite"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
