!function(){"use strict";function e(e){var t=this;return t.connect=function(){var t={name:"database.db",location:"default",bgType:1};return e.openDB(t)},t.execute=function(r,n){return e.execute(t.connect(),r,n)},t.deviceready=function(e){document.addEventListener("deviceready",function(){e()},!1)},t.orm={drop:function(){return["DROP TABLE IF EXISTS",this.displayName].join("  ")},create:function(){var e=this,r=[];Object.keys(e.prototype).forEach(function(t,n){var o="",i=e.base[t];o=[o,t,i.type].join(" "),o=i.allowNulls?[o,"NULL"].join(" "):[o,"NOT NULL"].join(" "),i.primaryKey?o=[o,"PRIMARY KEY AUTOINCREMENT"].join(" "):i.uniqueKey&&(o=[o,"UNIQUE"].join(" ")),r.push(o)});var n=["CREATE TABLE IF NOT EXISTS",this.displayName,"(",r.join(", "),")"].join("  ");return t.execute(n)},insert:function(e){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(t,r){"id"!=t&&(n.push(t),o.push(e[t]))});var i=" insert into {0} ( {1} ) values ( ? {2} ) ".format(r.displayName,n.join(", "),", ?".repeat(o.length-1));return t.execute(i,o)},update:function(e){var r=this,n=[],o=[];Object.keys(r.prototype).forEach(function(t,r){"id"!=t&&(n.push(t+" = ?"),o.push(e[t]))}),o.push(e.id);var i=" update {0} set {1} where id = ? ".format(r.displayName,n.join(", "));return t.execute(i,o)},delete:function(e){var r=this,n=" delete from {0} where id = ? ".format(r.displayName);return t.execute(n,[e])},select:function(e){var r=" select * from {0} ".format([this.displayName]);return e?(r+=" where id = ? ",t.execute(r,[e])):t.execute(r)}},t.implement=function(e,r,n){function o(){}return Object.keys(r).forEach(function(e){o.prototype[e]=null}),o.prototype.id=null,o.displayName=e,o.base=r,o.drop=t.orm.drop,o.create=t.orm.create,o.insert=t.orm.insert,o.update=t.orm.update,o.delete=t.orm.delete,o.select=t.orm.select,t.deviceready(function(){n&&o.drop(),o.create()}),o},{deviceready:t.deviceready,implement:t.implement}}String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}),String.prototype.repeat||(String.prototype.repeat=function(e){for(var t="",r=this,n=0;n<e;n++)t+=r;return t});angular.module("Colite",["ngCordova"]).service("$colite",e).constant("Colite",{STRING:"STRING",INTEGER:"INTEGER",DATE:"DATE",DATETIME:"DATETIME",BIGINT:"BIGINT",DECIMAL:"NUMERIC",TEXT:"TEXT"});e.$inject=["$cordovaSQLite"]}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbGl0ZS5qcyJdLCJuYW1lcyI6WyJDb2xpdGUiLCIkY29yZG92YVNRTGl0ZSIsInZtIiwidGhpcyIsImNvbm5lY3QiLCJjb25maWciLCJuYW1lIiwibG9jYXRpb24iLCJiZ1R5cGUiLCJvcGVuREIiLCJleGVjdXRlIiwicXVlcnkiLCJ2YWx1ZXMiLCJkZXZpY2VyZWFkeSIsImNhbGxiYWNrIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwib3JtIiwiZHJvcCIsImRpc3BsYXlOYW1lIiwiam9pbiIsImNyZWF0ZSIsIm1vZGVsIiwiT2JqZWN0Iiwia2V5cyIsInByb3RvdHlwZSIsImZvckVhY2giLCJrZXkiLCJ2YWx1ZSIsInByb3AiLCJwcm9wT2JqIiwiYmFzZSIsInR5cGUiLCJhbGxvd051bGxzIiwicHJpbWFyeUtleSIsInVuaXF1ZUtleSIsInB1c2giLCJpbnNlcnQiLCJvYmplY3QiLCJmb3JtYXQiLCJyZXBlYXQiLCJsZW5ndGgiLCJ1cGRhdGUiLCJpZCIsImRlbGV0ZSIsInNlbGVjdCIsImltcGxlbWVudCIsImZvcmNlIiwiU3RyaW5nIiwiYXJncyIsImFyZ3VtZW50cyIsInJlcGxhY2UiLCJtYXRjaCIsIm51bWJlciIsInN0ciIsImkiLCJhbmd1bGFyIiwibW9kdWxlIiwic2VydmljZSIsImNvbnN0YW50IiwiU1RSSU5HIiwiSU5URUdFUiIsIkRBVEUiLCJEQVRFVElNRSIsIkJJR0lOVCIsIkRFQ0lNQUwiLCJURVhUIiwiJGluamVjdCJdLCJtYXBwaW5ncyI6IkNBQUMsV0FDRyxZQTBDQSxTQUFTQSxHQUFPQyxHQUNaLEdBQUlDLEdBQUtDLElBaUlULE9BL0hBRCxHQUFHRSxRQUFVLFdBQ1QsR0FBSUMsSUFBV0MsS0FBTSxjQUFlQyxTQUFVLFVBQVdDLE9BQVEsRUFDakUsT0FBT1AsR0FBZVEsT0FBT0osSUFHakNILEVBQUdRLFFBQVUsU0FBU0MsRUFBT0MsR0FDekIsTUFBT1gsR0FBZVMsUUFBUVIsRUFBR0UsVUFBV08sRUFBT0MsSUFH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QUFXNUMsRUFBRzRDLFdBNUtqQkUsT0FBT3ZCLFVBQVVjLFNBQ2xCUyxPQUFPdkIsVUFBVWMsT0FBUyxXQUN0QixHQUFJVSxHQUFPQyxTQUNYLE9BQU8vQyxNQUFLZ0QsUUFBUSxXQUFZLFNBQVNDLEVBQU9DLEdBQzVDLFdBQThCLEtBQWhCSixFQUFLSSxHQUNmSixFQUFLSSxHQUNMRCxNQUlYSixPQUFPdkIsVUFBVWUsU0FDbEJRLE9BQU92QixVQUFVZSxPQUFTLFNBQVNDLEdBSS9CLElBQUssR0FIRGEsR0FBTSxHQUNOZCxFQUFTckMsS0FFSm9ELEVBQUksRUFBR0EsRUFBSWQsRUFBUWMsSUFDeEJELEdBQVlkLENBR2hCLE9BQU9jLElBSUZFLFNBQ1JDLE9BQU8sVUFBVyxjQUVsQkMsUUFBUSxVQUFXMUQsR0FFbkIyRCxTQUFTLFVBQ05DLE9BQVEsU0FDUkMsUUFBUyxVQUNUQyxLQUFNLE9BQ05DLFNBQVUsV0FDVkMsT0FBUSxTQUNSQyxRQUFTLFVBQ1RDLEtBQU0sUUFHZGxFLEdBQU9tRSxTQUFXIiwiZmlsZSI6ImNvbGl0ZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XHJcbiAgICAndXNlIHN0cmljdCdcclxuXHJcbiAgICBpZiAoIVN0cmluZy5wcm90b3R5cGUuZm9ybWF0KSB7XHJcbiAgICAgICAgU3RyaW5nLnByb3RvdHlwZS5mb3JtYXQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlcGxhY2UoL3soXFxkKyl9L2csIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgYXJnc1tudW1iZXJdICE9ICd1bmRlZmluZWQnID9cclxuICAgICAgICAgICAgICAgICAgICBhcmdzW251bWJlcl0gOlxyXG4gICAgICAgICAgICAgICAgICAgIG1hdGNoO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgaWYgKCFTdHJpbmcucHJvdG90eXBlLnJlcGVhdCkge1xyXG4gICAgICAgIFN0cmluZy5wcm90b3R5cGUucmVwZWF0ID0gZnVuY3Rpb24obGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdHIgPSAnJztcclxuICAgICAgICAgICAgdmFyIHJlcGVhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBzdHIgPSBzdHIgKyByZXBlYXQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBzdHI7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgY29saXRlID0gYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ0NvbGl0ZScsIFsnbmdDb3Jkb3ZhJ10pXHJcbiAgICAgICAgLy8gc2VydmnDp29zIFxyXG4gICAgICAgIC5zZXJ2aWNlKCckY29saXRlJywgQ29saXRlKVxyXG4gICAgICAgIC8vIGNvbnN0YW50ZXMgXHJcbiAgICAgICAgLmNvbnN0YW50KCdDb2xpdGUnLCB7XHJcbiAgICAgICAgICAgIFNUUklORzogXCJTVFJJTkdcIixcclxuICAgICAgICAgICAgSU5URUdFUjogXCJJTlRFR0VSXCIsXHJcbiAgICAgICAgICAgIERBVEU6IFwiREFURVwiLFxyXG4gICAgICAgICAgICBEQVRFVElNRTogXCJEQVRFVElNRVwiLFxyXG4gICAgICAgICAgICBCSUdJTlQ6IFwiQklHSU5UXCIsXHJcbiAgICAgICAgICAgIERFQ0lNQUw6IFwiTlVNRVJJQ1wiLFxyXG4gICAgICAgICAgICBURVhUOiBcIlRFWFRcIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIENvbGl0ZS4kaW5qZWN0ID0gWyckY29yZG92YVNRTGl0ZSddO1xyXG5cclxuICAgIGZ1bmN0aW9uIENvbGl0ZSgkY29yZG92YVNRTGl0ZSkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLmNvbm5lY3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHsgbmFtZTogJ2RhdGFiYXNlLmRiJywgbG9jYXRpb246ICdkZWZhdWx0JywgYmdUeXBlOiAxIH07XHJcbiAgICAgICAgICAgIHJldHVybiAkY29yZG92YVNRTGl0ZS5vcGVuREIoY29uZmlnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZtLmV4ZWN1dGUgPSBmdW5jdGlvbihxdWVyeSwgdmFsdWVzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkY29yZG92YVNRTGl0ZS5leGVjdXRlKHZtLmNvbm5lY3QoKSwgcXVlcnksIHZhbHVlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5kZXZpY2VyZWFkeSA9IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2RldmljZXJlYWR5JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9LCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2bS5vcm0gPSB7XHJcbiAgICAgICAgICAgIGRyb3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHF1ZXJ5ID0gWydEUk9QIFRBQkxFIElGIEVYSVNUUycsIHRoaXMuZGlzcGxheU5hbWVdLmpvaW4oJyAgJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcXVlcnk7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gdm0uZXhlY3V0ZShxdWVyeSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNyZWF0ZSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vZGVsLnByb3RvdHlwZSkuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3AgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcE9iaiA9IG1vZGVsLmJhc2Vba2V5XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcCA9IFtwcm9wLCBrZXksIHByb3BPYmoudHlwZV0uam9pbignICcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE9iai5hbGxvd051bGxzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wID0gW3Byb3AsICdOVUxMJ10uam9pbignICcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9IFtwcm9wLCAnTk9UIE5VTEwnXS5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wT2JqLnByaW1hcnlLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3AgPSBbcHJvcCwgJ1BSSU1BUlkgS0VZIEFVVE9JTkNSRU1FTlQnXS5qb2luKCcgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wT2JqLnVuaXF1ZUtleSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcCA9IFtwcm9wLCAnVU5JUVVFJ10uam9pbignICcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjcmVhdGUucHVzaChwcm9wKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9IFsnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMnLCB0aGlzLmRpc3BsYXlOYW1lLCAnKCcsIGNyZWF0ZS5qb2luKCcsICcpLCAnKSddLmpvaW4oJyAgJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm0uZXhlY3V0ZShxdWVyeSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluc2VydDogZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluc2VydCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKG1vZGVsLnByb3RvdHlwZSkuZm9yRWFjaChmdW5jdGlvbihrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGtleSAhPSAnaWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydC5wdXNoKGtleSk7IC8vIHByb3BcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gob2JqZWN0W2tleV0pOyAvLyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9ICcgaW5zZXJ0IGludG8gezB9ICggezF9ICkgdmFsdWVzICggPyB7Mn0gKSAnLmZvcm1hdChcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbC5kaXNwbGF5TmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnQuam9pbignLCAnKSxcclxuICAgICAgICAgICAgICAgICAgICAnLCA/Jy5yZXBlYXQodmFsdWVzLmxlbmd0aCAtIDEpKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm0uZXhlY3V0ZShxdWVyeSwgdmFsdWVzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdXBkYXRlOiBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMobW9kZWwucHJvdG90eXBlKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9ICdpZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnB1c2goa2V5ICsgJyA9ID8nKTsgLy8gcHJvcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMucHVzaChvYmplY3Rba2V5XSk7IC8vIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFsdWVzLnB1c2gob2JqZWN0LmlkKTtcclxuICAgICAgICAgICAgICAgIHZhciBxdWVyeSA9ICcgdXBkYXRlIHswfSBzZXQgezF9IHdoZXJlIGlkID0gPyAnLmZvcm1hdChtb2RlbC5kaXNwbGF5TmFtZSwgdXBkYXRlLmpvaW4oJywgJykpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmV4ZWN1dGUocXVlcnksIHZhbHVlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlbGV0ZTogZnVuY3Rpb24oaWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSAnIGRlbGV0ZSBmcm9tIHswfSB3aGVyZSBpZCA9ID8gJy5mb3JtYXQobW9kZWwuZGlzcGxheU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmV4ZWN1dGUocXVlcnksIFtpZF0pO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZWxlY3Q6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVlcnkgPSAnIHNlbGVjdCAqIGZyb20gezB9ICcuZm9ybWF0KFt0aGlzLmRpc3BsYXlOYW1lXSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVlcnkgPSBxdWVyeSArICcgd2hlcmUgaWQgPSA/ICc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZtLmV4ZWN1dGUocXVlcnksIFtpZF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm0uZXhlY3V0ZShxdWVyeSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5pbXBsZW1lbnQgPSBmdW5jdGlvbihuYW1lLCBiYXNlLCBmb3JjZSkge1xyXG4gICAgICAgICAgICAvLyBpbXBsZW1lbnRhw6fDo28gZG8gbW9kZWxvIGVtIHVtIG9iamV0by5cclxuICAgICAgICAgICAgZnVuY3Rpb24gbW9kZWwoKSB7fVxyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhiYXNlKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnByb3RvdHlwZVtwcm9wXSA9IG51bGw7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBtb2RlbC5wcm90b3R5cGUuaWQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgbW9kZWwuZGlzcGxheU5hbWUgPSBuYW1lO1xyXG4gICAgICAgICAgICBtb2RlbC5iYXNlID0gYmFzZTtcclxuXHJcbiAgICAgICAgICAgIG1vZGVsLmRyb3AgPSB2bS5vcm0uZHJvcDtcclxuICAgICAgICAgICAgbW9kZWwuY3JlYXRlID0gdm0ub3JtLmNyZWF0ZTtcclxuICAgICAgICAgICAgbW9kZWwuaW5zZXJ0ID0gdm0ub3JtLmluc2VydDtcclxuICAgICAgICAgICAgbW9kZWwudXBkYXRlID0gdm0ub3JtLnVwZGF0ZTtcclxuICAgICAgICAgICAgbW9kZWwuZGVsZXRlID0gdm0ub3JtLmRlbGV0ZTtcclxuICAgICAgICAgICAgbW9kZWwuc2VsZWN0ID0gdm0ub3JtLnNlbGVjdDtcclxuXHJcbiAgICAgICAgICAgIHZtLmRldmljZXJlYWR5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZvcmNlKVxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLmRyb3AoKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsLmNyZWF0ZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBtb2RlbDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBkZXZpY2VyZWFkeTogdm0uZGV2aWNlcmVhZHksXHJcbiAgICAgICAgICAgIGltcGxlbWVudDogdm0uaW1wbGVtZW50XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSgpKTsiXX0=
