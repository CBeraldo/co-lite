!function(){"use strict";function e(){var e=this;return e.isDeviceReady=!1,e.connect=function(){if(t){var e={name:"database.db",location:"default",bgType:1};return $cordovaSQLite.openDB(e)}},e.execute=function(r,o){return t?$cordovaSQLite.execute(e.connect(),r,o):{then:function(){return{catch:function(){}}}}},e.deviceready=function(t){e.isDeviceReady?t():document.addEventListener("deviceready",function(){t()},!1)},console.log("Ready: "+e.isDeviceReady),e.deviceready(function(t){e.isDeviceReady=!0,console.log("Ready: "+e.isDeviceReady)}),e.orm={drop:function(){var t=["DROP TABLE IF EXISTS",this.displayName].join("  ");return e.execute(t)},create:function(){var t=this,r=[];Object.keys(t.prototype).forEach(function(e,o){var n="",i=t.base[e];n=[n,e,i.type].join(" "),n=i.allowNulls?[n,"NULL"].join(" "):[n,"NOT NULL"].join(" "),i.primaryKey?n=[n,"PRIMARY KEY AUTOINCREMENT"].join(" "):i.uniqueKey&&(n=[n,"UNIQUE"].join(" ")),r.push(n)});var o=["CREATE TABLE IF NOT EXISTS",this.displayName,"(",r.join(", "),")"].join("  ");return e.execute(o)},insert:function(t){var r=this,o=[],n=[];Object.keys(r.prototype).forEach(function(e,r){"id"!=e&&(o.push(e),n.push(t[e]))});var i=" insert into {0} ( {1} ) values ( ? {2} ) ".format(r.displayName,o.join(", "),", ?".repeat(n.length-1));return e.execute(i,n)},update:function(t){var r=this,o=[],n=[];Object.keys(r.prototype).forEach(function(e,r){"id"!=e&&(o.push(e+" = ?"),n.push(t[e]))}),n.push(t.id);var i=" update {0} set {1} where id = ? ".format(r.displayName,o.join(", "));return e.execute(i,n)},delete:function(t){var r=this,o=" delete from {0} where id = ? ".format(r.displayName);return e.execute(o,[t])},select:function(t){var r=" select * from {0} ".format([this.displayName]);return t?(r+=" where id = ? ",e.execute(r,[t])):e.execute(r)}},e.implement=function(t,r,o){function n(){}return Object.keys(r).forEach(function(e){n.prototype[e]=null}),n.prototype.id=null,n.displayName=t,n.base=r,n.drop=e.orm.drop,n.create=e.orm.create,n.insert=e.orm.insert,n.update=e.orm.update,n.delete=e.orm.delete,n.select=e.orm.select,e.deviceready(function(){o&&n.drop(),n.create()}),n},{deviceready:e.deviceready,implement:e.implement}}var t="browser"!=cordova.platformId;String.prototype.format||(String.prototype.format=function(){var e=arguments;return this.replace(/{(\d+)}/g,function(t,r){return void 0!==e[r]?e[r]:t})}),String.prototype.repeat||(String.prototype.repeat=function(e){for(var t="",r=this,o=0;o<e;o++)t+=r;return t});angular.module("Colite",["ngCordova"]).service("$colite",e).constant("Colite",{STRING:"STRING",INTEGER:"INTEGER",DATE:"DATE",DATETIME:"DATETIME",BIGINT:"BIGINT",DECIMAL:"NUMERIC",TEXT:"TEXT"});console.log(cordova.platformId),t&&(e.$inject=["$cordovaSQLite"])}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
